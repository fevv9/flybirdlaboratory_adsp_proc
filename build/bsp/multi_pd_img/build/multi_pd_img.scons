#===============================================================================
#
# Target-Level Build Script for Modem Processor
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2009 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/dspbuild.adsp/2.5/bsp/multi_pd_img/build/multi_pd_img.scons#24 $
#  $DateTime: 2014/11/05 21:41:55 $
#  $Change: 6900754 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
import sys
import os
Import('env')

env = env.Clone()


#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias first alias is always the target then the other possibles

aliases = ['multi_pd_img', 'adsp_mpd_images', 'adsp_mpd_core_images', 
           'msm8974_MPD', 'mdm9x25_MPD', 'msm8x26_MPD', 'msm8x10_MPD', 'apq8084_MPD', 'msm8962_MPD', 'mpq8092_MPD',
           'mdm9x35_MPD', 'msm8992_MPD', 'msm8994_MPD', 'msm8996_MPD'
          ] #multi_pd_img is just for debugging the final stage of multi pd

# init environment variables
boot_img_name="bootimage_relocflag"
boot_img_name_non_reloc="bootimage_nonrelocflag"

env.InitImageVars(
   alias_list=aliases,           # aliases
   proc='qdsp6',              # proc
   config='adsp',                # config type, proc_name
   plat='qurt',
   target=boot_img_name,# target (elf, image file name)
   tools = [	'${BUILD_ROOT}/tools/build/scons/sectools/sectools_builder.py',
				'${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
				'${BUILD_ROOT}/build/qurt_mpd_image_builder.py']
   )

if not env.CheckAlias(alias_list=aliases):
   Return()

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.InitBuildConfig()

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
#this is the path for kernel to be used in multi PD build

#Add ADSP Image specific linker inputs here
env.LoadToolScript('hexagon_adsp', toolpath = ['${BUILD_ROOT}/build'])

if 'AddDummySegBuilder' not in env.get('BUILDERS'):
    env.LoadToolScript('kernel_builders', toolpath=['${COREBSP_ROOT}/bsp/build/scripts'])


if env.get('CHIPSET') == "msm8x10":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0X0BF00000")
elif env.get('CHIPSET') == "mdm9x25":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0X01300000")
elif env.get('CHIPSET') == "mdm9x35":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0x06400000")
elif env.get('CHIPSET') == "msm8992":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0x0C800000")   
elif env.get('CHIPSET') == "msm8994":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0x0C800000")   
elif env.get('CHIPSET') == "mpq8092":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0x0DB00000")   
elif env.get('CHIPSET') == "msm8996":
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0x8CB00000")     
else:
   env.Replace(QDSP6_MPD_PHYS_ADDR = "0X0DC00000")

#pass this flag thru build\ms\build.cmd USES_FLAGS=USES_GENSECIMAGE
#instead of hardcodeding in the scripts
#env.AddUsesFlags(['USES_GENSECIMAGE'])
#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# !! Note regarding Audio in User PD 
#Currently Audio is not in user pd. if at all it needs to be in User pd, enable the target scons for audio pd under build\bsp 
#and also add an env variable AUDIO_IN_USERPD, this will immediately enable adding audio user pd 
#env.Replace(AUDIO_IN_USERPD = 'no')
#-----------------------------------------------------------------------------------------------------------------------

target_images = []
build_ms_targets = []
target_images_non_reloc = []
build_ms_targets_non_reloc = []

#output of multipd weaver
boot_img=env.RealPath('${SHORT_BUILDPATH}/bootimage.pbn')

output_boot_img_name=env.RealPath('${BUILD_MS_ROOT}/'+boot_img_name+'.pbn')
target_images.extend([boot_img])

# for non reloc output
output_boot_img_name_non_reloc=env.RealPath('${BUILD_MS_ROOT}/'+boot_img_name_non_reloc+'.pbn')

guest_img='${BUILD_MS_ROOT}/M${BUILD_ASIC}${BUILD_ID}${BUILD_VER}.elf'
sensor_img='${BUILD_MS_ROOT}/M${BUILD_ASIC}${BUILD_ID}${BUILD_VER}_SENSOR.elf'
audio_img='${BUILD_MS_ROOT}/M${BUILD_ASIC}${BUILD_ID}${BUILD_VER}_AUDIO.elf'

#call multi pd weaver to generate relocated elf and final pbn
if 'AUDIO_IN_USERPD' in env:
  if (env.get('CHIPSET') == "msm8x10" or env.get('CHIPSET') == "mdm9x25" or env.get('CHIPSET') == "msm8996" or env.get('CHIPSET') == "mdm9x35") or ('USES_DISABLE_SENSORS' in env ) or ('BUILD_BAREBONE' in env ):
      output_boot_img=env.ImageBuild(target_images,[guest_img,audio_img,env.subst("${QDSP6_QURT_TOOLDIR}/qurt-image-build.py")], PHYS_ADDR='${QDSP6_MPD_PHYS_ADDR}')
  else:
      output_boot_img=env.ImageBuild(target_images,[guest_img,sensor_img,audio_img,env.subst("${QDSP6_QURT_TOOLDIR}/qurt-image-build.py")], PHYS_ADDR='${QDSP6_MPD_PHYS_ADDR}')
else:
  if (env.get('CHIPSET') == "msm8x10" or env.get('CHIPSET') == "mdm9x25" or env.get('CHIPSET') == "msm8996" or env.get('CHIPSET') == "mdm9x35") or ('USES_DISABLE_SENSORS' in env ) or ('BUILD_BAREBONE' in env ):
     output_boot_img=env.ImageBuild(target_images,[guest_img,env.subst("${QDSP6_QURT_TOOLDIR}/qurt-image-build.py")], PHYS_ADDR='${QDSP6_MPD_PHYS_ADDR}')
  else:
     output_boot_img=env.ImageBuild(target_images,[guest_img,sensor_img,env.subst("${QDSP6_QURT_TOOLDIR}/qurt-image-build.py")], PHYS_ADDR='${QDSP6_MPD_PHYS_ADDR}')

#call ModifyRelocatableFlag after qurt image builder for both Relocatable & Non-Relocatable
build_ms_targets = env.ModifyRelocatableFlagsBuilder(output_boot_img_name, output_boot_img[0])
build_ms_targets_non_reloc = env.InstallAs(output_boot_img_name_non_reloc, output_boot_img[0])

#-------------------------------------------------------------------------
# Add a dummy segment for dynamic footprints
#-------------------------------------------------------------------------
if env.get('CHIPSET') == "mdm9x25" or env.get('CHIPSET') == "mdm9x35":
    build_ms_targets_stage2 = build_ms_targets
    build_ms_targets_non_reloc_stage2 = build_ms_targets_non_reloc
else:
    build_ms_targets_stage2 = env.AddDummySegBuilder("${BUILD_MS_ROOT}/bootimage_relocflag_withdummyseg.pbn", [build_ms_targets, "${BUILD_ROOT}/build/chipset/${CHIPSET_DIR}/qdsp6.xml"])     
    build_ms_targets_non_reloc_stage2 = env.AddDummySegBuilder("${BUILD_MS_ROOT}/bootimage_nonrelocflag_withdummyseg.pbn", [build_ms_targets_non_reloc, "${BUILD_ROOT}/build/chipset/${CHIPSET_DIR}/qdsp6.xml"])
    env.PrintInfo("the chipset directory where the XML file called from is: ${CHIPSET_DIR} for AddDummySegBuilder")



#generate mbn out of the pbn for both Relocatable & Non-Relocatable
multipd_mbn = env.MbnBuilder("adsp", build_ms_targets_stage2, IMAGE_TYPE="qdsp6sw", ENABLE_RELOCATABLE=True, FLASH_TYPE=env['TARGET_FLASH_TYPE'])
multipd_mbn_non_reloc = env.MbnBuilder("adsp_non_reloc", build_ms_targets_non_reloc_stage2, IMAGE_TYPE="qdsp6sw", FLASH_TYPE=env['TARGET_FLASH_TYPE'])

#----------------------------------------------------------------------------
# Sectools signing
#----------------------------------------------------------------------------
sectools_signed_mbn = env.SectoolBuilder(
        target_base_dir = '${SHORT_BUILDPATH}', 
        source=multipd_mbn, 
        sign_id="adsp",
        msmid = env.subst('${MSM_ID}'),
        sectools_install_base_dir = '${BUILD_ROOT}/obj/qdsp6v5_ReleaseG/',  
        install_file_name = "adsp.mbn")   

  
#install target elf
install_unsigned_root = env.SectoolGetUnsignedInstallPath(install_base_dir = '${BUILD_ROOT}/obj/qdsp6v5_ReleaseG/')
obj_mbn = env.InstallAs(os.path.join(install_unsigned_root, 'adsp.mbn'), multipd_mbn)

target_elf = env.InstallAs('${BUILD_ROOT}/dsp.elf', multipd_mbn)


#install target elf non relocatable
target_elf_non_reloc = env.InstallAs('${BUILD_ROOT}/dsp_non_reloc.elf', multipd_mbn_non_reloc)
obj_mbn_non_reloc = env.InstallAs('${BUILD_ROOT}/obj/qdsp6v5_ReleaseG/non_reloc/adsp.mbn', target_elf_non_reloc)

target_images.append(build_ms_targets)
target_images.append(multipd_mbn)
target_images.append(target_elf)
target_images.append(obj_mbn)

# for non-relocatable image
target_images_non_reloc.append(build_ms_targets_non_reloc)
target_images_non_reloc.append(multipd_mbn_non_reloc)
target_images_non_reloc.append(target_elf_non_reloc)
target_images_non_reloc.append(obj_mbn_non_reloc)

target_images.append(sectools_signed_mbn)
   
print FindFile('build.cmd', '${BUILD_MS_ROOT}')
for alias in aliases:
   env.Alias(alias, target_images)

print FindFile('build.cmd', '${BUILD_MS_ROOT}')
for alias in aliases:
   env.Alias(alias, target_images_non_reloc)

