B-family: Build Commands:
------------------------
Go to 'adsp_proc\build' and then run the build command:

1. cd adsp_proc
2. cd build
3. To compile:
    BUILD COMMAND:   
        python build.py -c <CHIPSET> -b <build_id> -p <pid>  
4. To clean:
    CLEAN COMMAND:   
        python build.py -c <CHIPSET> -b <build_id> -p <pid> -o clean

Example:
For 8994:  python build.py -c msm8994 -o all
For 8x96:  python build.py -c msm8996 -o all

For 8974:  python build.py -c msm8974 -o all
For 8x26:  python build.py -c msm8x26 -o all
For 8x10:  python build.py -c msm8x10 -o all
For 9x25:  python build.py -c mdm9x25 -o all

For 8084:  python build.py -c apq8084 -o all
For 8962:  python build.py -c msm8962 -o all
For 9x35:  python build.py -c mdm9x35 -o all

The above commands are common across windows and linux environments.
Build commands using build.cmd and build_adsp_image.sh are obsolete. Please use above commands which uses build.py


Note:
    a. For HAP packages:
        BUILD COMMAND: python build.py
        CLEAN COMMAND: python build.py -o clean
        
       There is no need to specify parameters to 'build.py' for HAP packages like HY11_1, HD11_1 etc (except as specified above), it takes default parameters from 'adsp_proc\hap\default_pack.txt'. 
       Use -b, -c, -p, -o options of 'build.py' only when you wish to override the default parameters from 'adsp_proc\hap\default_pack.txt' 
       (User specified parameters are a priority for 'build.py'.)
    
    b. For more information on build system, please refer to build system presentation document (80-NF768-20)

    c. Cygwin dependency on build system is removed for the ADSP builds. Now, for ADSP builds compilation, there is no requirement to install Cygwin anymore.
       



To compile individual module:
-----------------------------
Syntax: python build.py -m <module to build>

Eg: python build.py -m avs\aud\services\static_svcs\audio_dev_mgr

Conditional Compilation of library using uses flags:
----------------------------------------------------
Syntax: python build.py -f <uses flags seperated by comman ‘,’>       
Eg: python build.py -f CUSTOM_FLAG1,CUSTOM_FLAG2

The build compilation has to be under this flag as follows in the respective scons file:
    if 'CUSTOM_FLAG1' in env:
        env.AddLibrary (list of build tags, lib name, sources)

To compile/link using alias:
----------------------------
Syntax: python build.py -a <aliases separated by comma ‘,’>  -f  <add if any uses flags, seperated by comma ‘,’>           
  1.If user would like to build only one tech component, he needs to provide the respective uses flags accordingly.
    Eg: python build.py -a avs_libs -f USES_XXX,USES_YYY,USES_ZZZ
  2.Once avs is compiled, this would help to quickly link to get final dsp image as below:
    Eg: python build.py -a adsp_link,multipd_img

To compile based on verbose level: (If not specified verbose is set to 1) 
-------------------------------------------------------------------------
[0: 0ff, 1: limited, 2: detailed, 3: raw, no formatting]
   Syntax: python build.py -v <verbose level>
   Eg: python build.py -v 2

To compile based on various scons supported options:
---------------------------------------------------
   Syntax:  python build.py -s <options supported by scons separated by comma ‘,’>
   Eg: python build.py -s implicit-deps-unchanged,ignore-errors 
       Note: For these scons options, '--' is appended internally and supplied to SCons.

To compile based on customized user options:
---------------------------------------------------
   Syntax:  python build.py -u <customized user options separated by comma ‘,’>
   Eg: python build.py -u major_version=3,minor_version=5,is_qurt_enabled=yes
       Note: For these custom user options, raw options (i.e., as specified) is supplied to SCons.
             You can use these raw arguments using 'ARGUMENTS.get(<argument>)'. Eg: ARGUMENTS.get("major_version")

Note: Use ‘-c’ option for chipset (if required, for all the commands above).
