#ifndef __VSS_IMVM_PRIVATE_IF_H__
#define __VSS_IMVM_PRIVATE_IF_H__

/*
   Copyright (C) 2009-2014 QUALCOMM Technologies Incorporated.
   All rights reserved.
   Qualcomm Confidential and Proprietary

   $Header: //components/rel/avs.adsp/2.6.1/vsd/inc/private/vss_imvm_private_if.h#3 $
   $Author: svutukur $
*/

#include "apr_comdef.h"
#include "vss_common_public_if.h"

/****************************************************************************
 * CONCURRENCY MONITORING APIS                                              *
 ****************************************************************************/

/**
  Event generated by an MVM session to the CCM indicating that MVM is going
  to voice session active state.
 
  @par Payload
  #vss_imvm_evt_voice_active_t
  
  @return 
  None.

  @dependencies
  None.
 
  @comments
  This event informs the CCM of the current configuration of the MVM session
  (i.e. the number of nb/wb+ streams/vocproc connected to it). In response to
  this event the CCM performs the following two actions:
 
    1. Sets the VDSP clock.
 
    2. Broadcasts #VSS_ICCM_EVT_ACTIVE_SESSIONS event to all the currently
       active MVM sessions in the system (including the one that originated
       this event), informing them of the total number of streams and vocprocs
       in the system as well as the current VDSP clock.
 
   Based on the concurency information received in the #VSS_ICCM_EVT_ACTIVE_SESSIONS
   event, each MVM session configures the voice path timing offsets for the
   streams and vocprocs connected to it.
*/
#define VSS_IMVM_EVT_VOICE_SESSION_ACTIVE ( 0x00012E6B )

/** @brief Type definition for #vss_imvm_evt_voice_session_active_t.
*/
typedef struct vss_imvm_evt_voice_session_active_t vss_imvm_evt_voice_session_active_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the #VSS_IMVM_EVT_VOICE_SESSION_ACTIVE event.
*/
struct vss_imvm_evt_voice_session_active_t
{
  uint16_t num_nb_streams;
    /**< Number of narrow-band (8 KHz) streams connected to this MVM session. */
  uint16_t num_wb_plus_streams;
    /**< Number of wide-band (16 KHz) or higher streams connected to this MVM 
         session. */
  uint16_t num_nb_vocprocs;
    /**< Number of narrow-band (8 KHz) vocprocs connected to this MVM session. */
  uint16_t num_wb_plus_vocprocs;
    /**< Number of wide-band (16 Khz) or higher vocprocs connected to this MVM 
         session. */
  uint32_t total_kpps;
    /**< Total number of KPPS for all the streams and vocprocs connected to this 
         MVM session. */
  uint32_t tx_topology_id;
    /**< The TX vocproc topology ID connected to this MVM session. This paramter 
         is ignored if more than one vocproc is connected to the MVM. */
  uint32_t rx_topology_id;
    /**< The RX vocproc topology ID connected to this MVM session. This parameter 
         is ignored if more than one vocproc is connected to the MVM. */
  uint16_t vfr_mode; 
    /**< Vocoder frame synchronization mode. Possible values:\n
         - #VSS_ICOMMON_VFR_MODE_SOFT -- No frame synchronization. \n
         - #VSS_ICOMMON_VFR_MODE_HARD -- Hard Vocoder Frame Reference (VFR). 
           A 20 ms VFR interrupt. */
  uint16_t num_timewarp_streams;
    /**< Number of streams with time warping enabled. */
}
#include "apr_pack_end.h"
;


/**
  Event generated by the MVM session to the CCM indicating that MVM is going 
  to voice session inactive state. 
 
  @par Payload
  None.
  
  @return 
  None.

  @dependencies
  None.
 
  @comments
  In response to this event the CCM performs the following two actions: 
   
    1. Sets the VSDP clock.
   
    2. Broadcasts #VSS_ICCM_EVT_ACTIVE_SESSIONS event to all the currently
       active MVM sessions in the system (excluding the one that originated
       this event), informing them of the total number of streams and vocprocs
       in the system as well as the VDSP clock.
*/
#define VSS_IMVM_EVT_VOICE_SESSION_INACTIVE ( 0x00012E6C )


/**
  Command sent by the MVM session to itself to indicate that a reconfiguration 
  of the voice path is necessary.
 
  @par Payload
  None.
  
  @return 
  None.

  @dependencies
  None.
 
  @comments
  This command is generated when the MVM session is notified by one of the 
  streams or vocprocs attached to it that their configuration (i.e. media type, 
  topology, sample rates and/or KPPS requirements) has changed, which requires 
  MVM to re-calculate the timing offsets for this session, as well report the 
  configuration changes to the CCM, so that the CCM may set the clocks 
  accordingly and notify all other MVM sessions of the changes.
*/
#define VSS_IMVM_CMD_RECONFIG ( 0x00012E6D )


/**
  Command sent by the MVM session to itself to indicate that dynamic system
  configurations has been changed on the voice path.
 
  @par Payload
  #vss_imvm_cmd_dynamic_reconfig_t
  
  @return 
  #APRV2_IBASIC_RSP_RESULT

  @dependencies
  None.
 
  @comments
  This command is generated when the MVM session is notified by one of the
  streams or vocprocs attached to it that their dynamic configurations (e.g.
  vocoder operating mode, etc.) has changed, which requires MVM to dynamically
  reconfigure the attached streams and vocprocs.
*/
#define VSS_IMVM_CMD_DYNAMIC_RECONFIG ( 0x000130A8 )

/** @brief Type definition for #vss_imvm_cmd_dynamic_reconfig_t.
*/
typedef struct vss_imvm_cmd_dynamic_reconfig_t vss_imvm_cmd_dynamic_reconfig_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the #VSS_IMVM_CMD_DYNAMIC_RECONFIG command.
*/
struct vss_imvm_cmd_dynamic_reconfig_t
{
  uint32_t rx_voc_op_mode;
    /** Rx vocoder operating mode. Supported values: \n
        see @latexonly \hyperref[cal_voc_op_mode]{Calibration Vocoder Operating
        Modes}@endlatexonly. */
  uint32_t tx_voc_op_mode;
    /** Tx vocoder operating mode. Supported values: \n
        see @latexonly \hyperref[cal_voc_op_mode]{Calibration Vocoder Operating
        Modes}@endlatexonly. */
}
#include "apr_pack_end.h"
;


/**
  Command sent by the MVM session to the CCM indicating that 
  the clock needs to be overridden to the highest level.
 
  @par Payload
  None.
  
  @return 
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.
 
  @comments
  In response to this command the CCM performs the following actions: 
   
    1. Updates the cached information of clock override requests.

    2. If the highest clock request was already posted to MMPM the request is ignored.
       Otherwise a new clock request for highest clock is placed to MMPM.

*/
#define VSS_IMVM_CMD_SET_MAX_CLOCK  ( 0x0001308D )

/**
  Command sent by the MVM session to the CCM indicating that MVM reached
  a steady state and the VDSP clock level override should be un-done.
 
  @par Payload
  None.
  
  @return 
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.
 
  @comments
  In response to this command the CCM performs the following actions: 

    1. Updates the cached information of clock override requests.

    2. If there is not a single MVM session that needs highest clock,
       CCM will revert the highest clock request by requesting clock as per system configuration.

       Otherwise if there is at least one MVM session that needs highest clock,
       this command is ignored.
*/
#define VSS_IMVM_CMD_RESET_MAX_CLOCK ( 0x0001308E )

#endif /* __VSS_IMVM_PRIVATE_IF_H__ */

