#===============================================================================
#
# AVS AU
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2009-2009 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#  $DateTime: $
#  $Author:  $
#  $Change:  $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')
import os
import sys
#import pdb;pdb.set_trace()
if env.PathExists("${BUILD_ROOT}/audio_avs"):
   env.Replace(AVS_AU_NAME ='audio_avs')
else:
   env.Replace(AVS_AU_NAME ='avs')

env.Replace(AVS_ROOT = '${INC_ROOT}/${AVS_AU_NAME}')

# If OEM_ROOT is set from command prompt, then the following are done :-
# Set OEM_ROOT in 'env'
# Import Public API Paths from HAP component required for compilation of Audio Decoder Services and Audio Processing Services
# Append OEM_ROOT flag in the list of existing flags
if os.environ.get('OEM_ROOT')!=None:
    env['OEM_ROOT'] = os.environ['OEM_ROOT']
    env.RequirePublicApi('HAP_AVS',area='hap')
    env.Append(CFLAGS = '-DOEM_ROOT')
env = env.Clone()

#import pdb; pdb.set_trace()
#load the avs_library_builder
env.Tool('avs_library_builder', toolpath = ['${AVS_ROOT}/build'])

#import pdb; pdb.set_trace()

if env.get('CHECKSIMBOOT') == True:  
   env.Append(CFLAGS = '-DSIMBOOT=1')
   
if 'USES_AVS_TEST' in env:
    env.Replace(AVS_TEST = True)
    env.Append(CFLAGS='-Wno-error=format -Wno-format')

if 'USES_DBG_MEM_LEAK' in env:
    env.Append(CFLAGS='-DDBG_MEM_LEAK')

if 'USES_MALLOC_WRAPPER' in env:
    env.Append(CFLAGS='-DMALLOC_WRAPPER')

if 'USES_DBG_BUFFER_ADDRESSES' in env:
    env.Append(CFLAGS='-DDBG_BUFFER_ADDRESSES')

# Function section macro
if 'USES_ENABLE_FUNCTION_SECTIONS' not in env:
   env.Replace(USES_ENABLE_FUNCTION_SECTIONS = True)

#use -O2 opz.Default is -Os. O2 is found to be better than -Os based on the profiling data.
#Use -Os when compiling for DINO256
if env.get('DINO256MB'):
   print "Compiling flag is set to", env.subst('${HEXAGONCC_OPT}')
else:
   env.Replace(HEXAGONCC_OPT = "${HEXAGON_OPT_2}")

#Invoke target specific build_config to environment   
get_inc_root=str(env['INC_ROOT'])
AVS_AU_NAME=env['AVS_AU_NAME']
join_path="".join([get_inc_root,'/',AVS_AU_NAME,'/build/'])
path_to_insert=os.path.join(env.RealPath(join_path),'%s') %env['CHIPSET']
sys.path.insert(0, path_to_insert) 

import_build_config = 'from build_config_'+env.get('CHIPSET')+' '+'import chipset_specific_build_config'
exec(import_build_config)
chipset_specific_build_config(env)

if 'USES_AVS_TEST' in env:
   from cosim_config import generate_cosim_config
   generate_cosim_config(env)

#Disable -Werror for SIM   
if 'USES_AVS_TEST' not in env:
   env.Append(CFLAGS = '-Werror')
   print "werror enabled"
   
#env.Append(CFLAGS = '-Wno-error=conversion-null -Wno-error=pointer-arith')   

   
env.Append(CFLAGS = '-mqdsp6-compat')


Q6_MEMORY_DEFN_PATH = env.get('CHIPSET')

env.PublishProtectedApi('AVS',[
   '${AVS_ROOT}/avcs/inc',
   '${AVS_ROOT}/voice/algos/sample_slip/inc',
   '${AVS_ROOT}/voice/algos/tty/inc',
   '${AVS_ROOT}/voice/algos/vocoder_eamr/inc',
   '${AVS_ROOT}/voice/algos/vocoder_amrwb/inc',
   '${AVS_ROOT}/voice/algos/vocoder_capi/inc',
   '${AVS_ROOT}/voice/algos/vocoder_evrc/inc',
   '${AVS_ROOT}/voice/algos/vocoder_fourgv/inc',
   '${AVS_ROOT}/voice/algos/vocoder_fr/inc',
   '${AVS_ROOT}/voice/algos/vocoder_g711/inc',
   '${AVS_ROOT}/voice/algos/vocoder_v13k/inc',
   '${INC_ROOT}/build/chipset/'+Q6_MEMORY_DEFN_PATH,
   '${QDSP6_RELEASE_DIR}/qc/lib/common',
   ])

#Set the libqdsp based on the tools version
tool_version=int(os.environ.get('HEXAGON_RTOS_RELEASE').split()[0][0])
if tool_version > 6:
   env.AddOEMLibrary(['AVS_ADSP', 'CORE_QDSP6_SENSOR_SW'], env.get('QDSP6_RELEASE_DIR')+'/Tools/target/hexagon/lib/'+env.get('Q6VERSION')+'/libhexagon.a')
else:
   env.AddOEMLibrary(['AVS_ADSP', 'CORE_QDSP6_SENSOR_SW'], env.get('QDSP6_RELEASE_DIR')+'/qc/lib/'+env.get('Q6VERSION')+'/libqdsp.a')

if 'USES_AVS_TEST' in env:
   env.AddOEMLibrary(['AVS_ADSP'], env.get('QDSP6_RELEASE_DIR')+'/qc/lib/'+env.get('Q6VERSION')+'/libqdsp.a')

qdsp6_public_apis = [
   'QDSP6'
   ]
env.RequirePublicApi(qdsp6_public_apis, area='qdsp6')
if 'USES_AVS_SHARED_LIBS' in env:
   SRCPATH='..'
   env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
   avs_sources = env.GlobSourceFiles(['autogenerated/*.cpp'], SRCPATH,posix=True)
   env.AvsSoGenerator('AVS_SHARED_LIBS',avs_sources)

env.LoadSoftwareUnits()
