def genheader_cmd(args):
    import os, subprocess, sys
    from optparse import OptionParser
    parser = OptionParser('%prog genheader [--include file]... output_file')
    parser.add_option('-I',
                      '--include',
                      action='append',
                      default=[])
    parser.add_option('-T',
                      '--tools_path')
    parser.add_option('-L',
                      '--use_llvm',
                      action='store_true')
    opts, args = parser.parse_args(args)

    if opts.use_llvm:
        compiler = os.path.join('qc','bin','hexagon-clang')
    else:
        compiler = os.path.join('gnu','bin','hexagon-gcc')
    if opts.tools_path:
        compiler = os.path.join(opts.tools_path, compiler)
    else:
        compiler = os.path.basename(compiler)

    compiler_command = [compiler, '-E', '-P', '-DGEN_CONFIG_HEADER']
    for f in opts.include:
        compiler_command += ['--include', f]
    compiler_command += [os.path.join(os.path.dirname(sys.argv[0]),'Input','cust_config.c')]

    if args:
        print ' '.join(compiler_command)

    process = subprocess.Popen(compiler_command, stdout=subprocess.PIPE)

    h_file = process.communicate()

    if process.returncode:
        return process.returncode

    full_h_file  = '/* This file is automatically generated. */\n'
    full_h_file += '#ifndef GEN_CONFIG_HEADER_USED\n'
    full_h_file += '#define GEN_CONFIG_HEADER_USED\n'
    full_h_file += h_file[0]
    if not full_h_file.endswith('\n'):
        full_h_file += '\n'
    full_h_file += '#endif /* GEN_CONFIG_HEADER_USED */\n'

    f = open(args[0], 'w')
    f.write(full_h_file)
    f.close()

    return 0
