#===============================================================================
#
# POWER Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2013 by QUALCOMM Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#===============================================================================
Import('env')
import os
env = env.Clone()

#-------------------------------------------------------------------------------
# Convert warnings to errors 
#-------------------------------------------------------------------------------
if not os.environ.get('COMPILER','gcc').startswith('llvm'):
   env.Append(CFLAGS = "-Werror ")



"""
  Determine which processor the currently build is for using the
  actively building image. There cannot be more than one of the
  same name within a target.  Meaning, 7x30 cannot have two 
  processors named apps.

  Possible processors are:

  apps - Applications
  modem - Modem Functionality 
  modemCtrl - Modem Controller
  rpm - Resource Power Manager
  lpa - Low Power Audio
  riva - wireless connectivity
"""

target_images = [
    (['default'],
        {
            'modem'   : ['SINGLE_IMAGE', 'CBSP_SINGLE_IMAGE',
                         'MODEM_IMAGE', 'CBSP_MODEM_IMAGE',
                         'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'],
            'adsp'    : ['SINGLE_IMAGE', 'CBSP_SINGLE_IMAGE',
                         'MODEM_IMAGE', 'CBSP_MODEM_IMAGE',
                         'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE',
                         'CORE_QDSP6_SENSOR_SW', 'CORE_QDSP6_AUDIO_SW'],
            'apps'    : ['APPS_IMAGE', 'CBSP_APPS_IMAGE'],
            'rpm'     : ['RPM_IMAGE'],
            'riva'    : ['WCN_IMAGE', 'CBSP_WCN_IMAGE'],
            'sensors' : ['CORE_SPS'],
            'sbl3'    : ['SBL3_BOOT_IMAGE'],
        },
    ),
    (['8200', '8900', '9x00', '8220'],
        {
            'modem'     : ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'],
            'modemCtrl' : ['MODEM_IMAGE', 'CBSP_MODEM_IMAGE'],
        },
    ),
]

def find_image_list(hal_platform):
    target_specific_images = [x[1] for x in target_images if hal_platform in x[0]]
    default_images = [x[1] for x in target_images if 'default' in x[0]]
    return (target_specific_images + default_images)[0]

def determine_processor_name(env):
  target_images = find_image_list(env['HAL_PLATFORM'])

  env_var_names = set(env.gvars().keys())

  for image in target_images:
    if (env_var_names.intersection(set(target_images[image]))):
      return image

  return 'unknown'

env.AddMethod(determine_processor_name, 'DetermineProcessorName')

#Protected APIs are only accessible to units inside power
power_utils_protected_apis = [
  "${INC_ROOT}/core/power/utils/inc",
]

# Adding appropriate Sleep include directory based on Sleep version. Once
# all targets on this PW starts to support sleep2.0 and hence sleep2.0 
# becomes default sleep, sleep/inc can be directly added to above list.
if env['MSM_ID'] in ['8994', '8996']:
  print 'Using Sleep2.0 in Protected Power Utils APIs'
  power_utils_protected_apis.append("${INC_ROOT}/core/power/sleep2.0/inc")
else:
  # default to pre sleep2.0 apis.
  power_utils_protected_apis.append("${INC_ROOT}/core/power/sleep/inc")

env.PublishProtectedApi('POWER_UTILS', power_utils_protected_apis)

env.PublishProtectedApi('POWER_MPM', [
   "${INC_ROOT}/core/power/mpm/inc",
   "${INC_ROOT}/core/power/mpm/inc/asic/${MSM_ID}",
])

#QuRT user PD Flags
if 'USES_MULTI_PD' in env and 'USES_QURTOS_IMG' not in env:
  env.Append(CPPDEFINES=['-DUTILS_USE_MPD_APP'])
  env.Append(CPPDEFINES=['-DUSES_QURT'])

#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
