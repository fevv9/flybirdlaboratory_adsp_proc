# vi: tw=128 ts=3 sw=3 et
# @file dog.scons
# @brief This file contains the API details for the Dog Services (Hardware/Software)
#===============================================================================
# NOTE: The @brief description above does not appear in the PDF.
# The tms_mainpage.dox file contains the group/module descriptions that
# are displayed in the output PDF generated using Doxygen and LaTeX. To
# edit or update any of the group/module text in the PDF, edit the
# tms_mainpage.dox file or contact Tech Pubs.
#===============================================================================
#===============================================================================
# Copyright (c) 2014 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary.
#===============================================================================
#===============================================================================
# Edit History
# $Header: //components/rel/core.adsp/2.6.1/debugtools/dog/build/dog_sw.scons#2 $
# $DateTime: 2014/10/20 19:14:32 $
# $Change: 6803795 $
# $Author: pwbldsvc $
#===============================================================================

Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------

env.VariantDir('${BUILDPATH}', '../src', duplicate=0)

#-------------------------------------------------------------------------------
# External Dependency
#-------------------------------------------------------------------------------

#env.RequireExternalApi([
#   'XYZ',
#])

#-------------------------------------------------------------------------------
# Internal Dependency
#-------------------------------------------------------------------------------

env.RequirePublicApi([
   'DAL',
   'TMS',
   'DEBUGTOOLS', # alias to TMS
   'DEBUGTRACE',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   'KERNEL', # needs to be last (also contains wrong comdef.h)
])

env.RequireRestrictedApi([
   'TMS_RESTRICTED',
   'DEBUGTOOLS', # alias to TMS
])

#-------------------------------------------------------------------------------
# Sources
#-------------------------------------------------------------------------------

DOG_NHLOS = [
]

DOG_ROOT = [
   '${BUILDPATH}/dog_sw.c',
]

DOG_USER = [
   '${BUILDPATH}/dog_sw_user.c',
]

#-------------------------------------------------------------------------------
# Libraries
#-------------------------------------------------------------------------------

DOG_NHLOS_IMG = [
   'CORE_APPS',                  # Domain(REX + TN)
   'CORE_EOS',                   # Domain(REX + EOS)
   'CORE_GSS',                   # Domain(REX + GSS)
   'CORE_RPM',                   # Domain(REX + RPM)
   'CORE_VPU',                   # Domain(NHLOS + VPU)
   'CORE_WCN',                   # Domain(REX + WCN)
]

DOG_ROOT_IMG = [
   'CORE_ROOT_PD',                  # Domain(Root)
   'CORE_QDSP6_SW',              # Domain(Root + Audio)
   'CORE_MODEM', 'MODEM_MODEM',  # Domain(Root + Modem)
]

DOG_USER_IMG = [
   'CORE_USER_PD',                  # Domain(User)
   'CORE_QDSP6_AUDIO_SW',        # Domain(User Audio)
   'CORE_AUDIO_AVS_PD',          # Domain(User Audio)
   'CORE_QDSP6_MODEM_SW',        # Domain(User Modem)
   'CORE_QDSP6_SENSOR_SW',       # Domain(User Sensors)
   # 'Logical' User PD
   'CORE_QDSP6_SW',              # Domain(Root + Audio)
   'CORE_MODEM', 'MODEM_MODEM',  # Domain(Root + Modem)
]

env.AddLibrary(DOG_NHLOS_IMG, '${BUILDPATH}/dog_sw_nhlos', DOG_NHLOS)

env.AddLibrary(DOG_ROOT_IMG, '${BUILDPATH}/dog_sw_root', DOG_ROOT)

env.AddLibrary(DOG_USER_IMG, '${BUILDPATH}/dog_sw_user', DOG_USER)

#-------------------------------------------------------------------------------
# Task Provisioning Information
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:

   env.AddRCInitFunc( # Initilaize DOG_SW, OS Protection Domain
      DOG_NHLOS_IMG,
      {
         'sequence_group'             : 'RCINIT_GROUP_0',
         'init_name'                  : 'dog_sw_root',
         'init_function'              : 'dog_sw_root_init',
         'dependencies'               : [ 'dog_hal_root', ],
      })

   env.AddRCInitFunc( # Initilaize DOG_SW, OS Protection Domain
      DOG_ROOT_IMG,
      {
         'sequence_group'             : 'RCINIT_GROUP_0',
         'init_name'                  : 'dog_sw_root',
         'init_function'              : 'dog_sw_root_init',
         'dependencies'               : [ 'dog_hal_root', ],
      })

   env.AddRCInitFunc( # Initialize DOG_SW, Local Protection Domains
      DOG_USER_IMG,
      {
         'sequence_group'             : 'RCINIT_GROUP_0',
         'init_name'                  : 'dog_sw_user',
         'init_function'              : 'dog_sw_user_init',
         'dependencies'               : [ 'dog_sw_root', ], # Only Relevant *in* ROOT+USER Configs; Ignored in USER
      })

#-------------------------------------------------------------------------------
# Tracer Software Events
#-------------------------------------------------------------------------------

DOG_SW_SWE_EVENTS = [
   [ 'DOG_SW_SWE_R',           'DOG Relse            %x %x', 'T' ], # Release
   [ 'DOG_SW_SWE_E',           'DOG Error            %x %x', 'T' ], # Error
   [ 'DOG_SW_SWE_I',           'DOG Init             %x %x', 'T' ], # Initialize
   [ 'DOG_SW_SWE_D',           'DOG Dest             %x %x', 'T' ], # Destroy
]

if 'USES_QDSS_SWE' in env and len(DOG_SW_SWE_EVENTS) != 0:
   env.Append(CPPDEFINES = ['DOG_SW_TRACER_SWEVT'])
   env.Append(CPPPATH = ['${BUILD_ROOT}/core/debugtools/dog/build/${BUILDPATH}'])
   env.SWEBuilder(['${BUILD_ROOT}/core/debugtools/dog/build/${BUILDPATH}/dog_sw_tracer_swe.h'], None)
   env.AddSWEInfo(DOG_ROOT_IMG, DOG_SW_SWE_EVENTS)

#-------------------------------------------------------------------------------
# DALCFG Image "Static" Configuration Items
#-------------------------------------------------------------------------------

# NONE
