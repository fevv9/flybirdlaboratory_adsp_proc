#===============================================================================
# Copyright (c) 2012 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#===============================================================================
Import('env')

env = env.Clone()

if not 'USES_PLATFORM_MINIMAL' in env:
  platform_root = '${BUILD_ROOT}/platform'
  env.Replace(ADSP_PLATFORM_ROOT = platform_root)

  env.RequirePublicApi([
    'HAPSDK',
    'PLATFORM_LIBS',
    'STDDEF',
    'APPS_STD',
    'QAIC',
    'UTILS',
    ])


  core_public_apis = [
     'STORAGE',
     'KERNEL',
     ]

  env.RequirePublicApi(core_public_apis, area='core')

  env.RequireRestrictedApi([
    'SECURITY',
    'PLATFORM_FS',
    ])

  #-------------------------------------------------------------------------------
  # Source PATH
  #-------------------------------------------------------------------------------
  SRCPATH = "${ADSP_PLATFORM_ROOT}/platform_fs/src"
  env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)


  # Register as static library
  env.PLRegister("platform_fs_qdi")
  env.PLRegister("platform_fs")

  PLATFORM_FS_SOURCES =  [
     '${BUILDPATH}/platform_fs_qdi_driver.c',
  ]

  PLATFORM_FS_STUB_SOURCES =  [
     '${BUILDPATH}/platform_fs_qdi_stub.c',
     ]

  if 'USES_PLATFORM_FS' in env:
     PLATFORM_FS_SOURCES.append(env.AddQaicHeaderDep('${BUILDPATH}/platform_fs.c', "apps_std"))

  #-------------------------------------------------------------------------------
  # Add Libraries to image
  #-------------------------------------------------------------------------------

  platform_fs_lib = env.AddBinaryLibrary(   ['SINGLE_IMAGE', 'CBSP_SINGLE_IMAGE', 'MODEM_IMAGE', 'CBSP_MODEM_IMAGE',
      'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'],'${BUILDPATH}/platform_fs', PLATFORM_FS_SOURCES)

  # LInk stub library into sensors PD only if sensors is enabled
  if 'USES_DISABLE_SENSORS' not in env:
    platform_fs_stub_lib = env.AddBinaryLibrary(['CORE_QDSP6_SENSOR_SW'],
         '${BUILDPATH}/platform_fs_stub', PLATFORM_FS_STUB_SOURCES)

  #-------------------------------------------------------------------------------
  # Load Subunits (sys)
  #-------------------------------------------------------------------------------
  env.LoadSoftwareUnits()

#Clean and pack rules
CLEAN_LIST=[]
CLEAN_LIST.extend(env.FindFiles(['*.c', '*.cpp', '*.h'], '${ADSP_PLATFORM_ROOT}/platform_fs/src'))
CLEAN_LIST.extend(env.FindFiles(['*.c', '*.cpp', '*.h'], '${ADSP_PLATFORM_ROOT}/platform_fs/inc'))
env.CleanPack(['SINGLE_IMAGE', 'CBSP_SINGLE_IMAGE', 'MODEM_IMAGE', 'CBSP_MODEM_IMAGE','QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'], CLEAN_LIST)
